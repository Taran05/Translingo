AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Translingo

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: MyVPC
  
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  MyGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: public-subnet-1a

  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: public-subnet-1b

  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: private-subnet-1a

  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: private-subnet-1b

  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: public-route-table

  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyGatewayAttachment
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MyPublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyPublicRouteTable

  MyPublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyPublicRouteTable

  MyPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: private-route-table-1

  MyPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: private-route-table-2

  MyPrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet1
      RouteTableId: !Ref MyPrivateRouteTable1

  MyPrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet2
      RouteTableId: !Ref MyPrivateRouteTable2
  
  MyS3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: com.amazonaws.us-east-1.s3
      RouteTableIds:
        - !Ref MyPrivateRouteTable1
        - !Ref MyPrivateRouteTable2

  MyTranslateInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: 'Interface'
      VpcId: !Ref MyVPC
      ServiceName: com.amazonaws.us-east-1.translate
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref MyPrivateSubnet1
      SecurityGroupIds:
        - !Ref MyTranslateSecurityGroup

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: b00945917-document
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: ['GET', 'PUT', 'POST', 'DELETE']
            AllowedHeaders: ['*']
            MaxAge: 3000

  MyS3Bucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: b00945917-translate
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: ['GET', 'PUT', 'POST', 'DELETE']
            AllowedHeaders: ['*']
            MaxAge: 3000
  
  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
            - 's3:GetObject'
          Effect: Allow
          Resource: "arn:aws:s3:::b00945917-document/*"
          Principal: '*'
          Condition:
            StringEquals:
              "aws:sourceVpce": !Ref MyS3GatewayEndpoint
  
  MyBucketPolicy2:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
            - 's3:PutObject'
          Effect: Allow
          Resource: "arn:aws:s3:::b00945917-translate/*"
          Principal: '*'
          Condition:
            StringEquals:
              "aws:sourceVpce": !Ref MyS3GatewayEndpoint

  MyTranslationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: b00945917-queue
  
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  MyEC2InstanceForBackend:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: "b00945917-backend"
      SubnetId: !Ref MyPublicSubnet1
      SecurityGroupIds:
        - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: b00945917-backend
  
  MyEC2InstanceForFrontend:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      KeyName: "b00945917-frontend"
      SubnetId: !Ref MyPublicSubnet1
      SecurityGroupIds:
        - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: b00945917-frontend
  
  MyElasticIPAssociationForBackend:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MyEC2InstanceForBackend
      AllocationId: eipalloc-03e5eb10ef1cfed0f

  MyElasticIPAssociationForFrontend:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MyEC2InstanceForFrontend
      AllocationId: eipalloc-0a5b8d9f3de754b55
  
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: b00945917-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - translate:TranslateText
                Resource: "*"
        - PolicyName: SQSFullAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: "*"
        - PolicyName: TranslateFullAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - translate:*
                Resource: "*"
        - PolicyName: EC2FullAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                Resource: "*"
        - PolicyName: CloudWatchFullAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: b00945917-lambda-function
      Runtime: java17
      Handler: cloud.TranslationWorker::handleRequest
      Code:
        S3Bucket: b00945917-lambda
        S3Key: lambda-1.0-SNAPSHOT-aws.jar
      Role: !GetAtt MyIAMRole.Arn
      Timeout: 15
      Environment:
        Variables:
          TRANSLATION_BUCKET: !Ref MyS3Bucket2
          TRANSLATION_QUEUE: !Ref MyTranslationQueue
      VpcConfig:
        SecurityGroupIds:
          - !Ref MyLambdaSecurityGroup
        SubnetIds:
          - !Ref MyPrivateSubnet1
      TracingConfig:
        Mode: Active
  
  MyLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref MyVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          DestinationPrefixListId: pl-63a5400a
  
  MyTranslateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Translate function
      VpcId: !Ref MyVPC
  
  OutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MyTranslateSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - MyLambdaSecurityGroup
          - GroupId

  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MyLambdaSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - MyTranslateSecurityGroup
          - GroupId

  InboundRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MySecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - MyLambdaSecurityGroup
          - GroupId
  
  MyLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt MyTranslationQueue.Arn
      FunctionName: !Ref MyLambdaFunction